{
	"address": "0xD5413A5D23191cf1f1C79AF01544FCDd763Ba898",
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_initializationContractAddress",
					"type": "address"
				},
				{
					"internalType": "bytes",
					"name": "_calldata",
					"type": "bytes"
				}
			],
			"name": "InitializationFunctionReverted",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_invalidAddress",
					"type": "address"
				}
			],
			"name": "OwnableUnauthorizedAccount",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"components": [
						{
							"internalType": "address",
							"name": "facetAddress",
							"type": "address"
						},
						{
							"internalType": "enum IDiamondCut.FacetCutAction",
							"name": "action",
							"type": "uint8"
						},
						{
							"internalType": "bytes4[]",
							"name": "functionSelectors",
							"type": "bytes4[]"
						}
					],
					"indexed": false,
					"internalType": "struct IDiamondCut.FacetCut[]",
					"name": "_diamondCut",
					"type": "tuple[]"
				},
				{
					"indexed": false,
					"internalType": "address",
					"name": "_init",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "bytes",
					"name": "_calldata",
					"type": "bytes"
				}
			],
			"name": "DiamondCut",
			"type": "event"
		},
		{
			"inputs": [
				{
					"components": [
						{
							"internalType": "address",
							"name": "facetAddress",
							"type": "address"
						},
						{
							"internalType": "enum IDiamondCut.FacetCutAction",
							"name": "action",
							"type": "uint8"
						},
						{
							"internalType": "bytes4[]",
							"name": "functionSelectors",
							"type": "bytes4[]"
						}
					],
					"internalType": "struct IDiamondCut.FacetCut[]",
					"name": "_diamondCut",
					"type": "tuple[]"
				},
				{
					"internalType": "address",
					"name": "_init",
					"type": "address"
				},
				{
					"internalType": "bytes",
					"name": "_calldata",
					"type": "bytes"
				}
			],
			"name": "diamondCut",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	],
	"transactionHash": "0x843269d88191a2de1ba2eaf2c094fb6f92df565a6f946a19f34a69de0faf55e6",
	"receipt": {
		"to": null,
		"from": "0x97C860be7A003938a916e8633dD3E8d45Bcd0028",
		"contractAddress": "0xD5413A5D23191cf1f1C79AF01544FCDd763Ba898",
		"transactionIndex": 11,
		"gasUsed": "966471",
		"logsBloom": "0x
		"blockHash": "0x9b28856bd986ad3c3f4f2f867316ea3ccc4f40303704cd9478a44766fa850c45",
		"transactionHash": "0x843269d88191a2de1ba2eaf2c094fb6f92df565a6f946a19f34a69de0faf55e6",
		"logs": [],
		"blockNumber": 125054207,
		"cumulativeGasUsed": "4198339",
		"status": 1,
		"byzantium": true
	},
	"args": [],
	"numDeployments": 1,
	"solcInputHash": "2ccc6644f36fe7c7b6b0f443317deda8",
	"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_invalidAddress\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets-diamond/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/facets-diamond/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from '../interfaces/IDiamondCut.sol';\\nimport {LibDiamond} from '../libraries/LibDiamond.sol';\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n\\t/// @notice Add/replace/remove any number of functions and optionally execute\\n\\t///         a function with delegatecall\\n\\t/// @param _diamondCut Contains the facet addresses and function selectors\\n\\t/// @param _init The address of the contract or facet to execute _calldata\\n\\t/// @param _calldata A function call, including function selector and arguments\\n\\t///                  _calldata is executed with delegatecall on _init\\n\\tfunction diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external override {\\n\\t\\tLibDiamond.enforceIsContractOwner();\\n\\t\\tLibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n\\t\\tuint256 originalSelectorCount = ds.selectorCount;\\n\\t\\tuint256 selectorCount = originalSelectorCount;\\n\\t\\tbytes32 selectorSlot;\\n\\t\\t// Check if last selector slot is not full\\n\\t\\t// \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n\\t\\tif (selectorCount & 7 > 0) {\\n\\t\\t\\t// get last selectorSlot\\n\\t\\t\\t// \\\"selectorCount >> 3\\\" is a gas efficient division by 8 \\\"selectorCount / 8\\\"\\n\\t\\t\\tselectorSlot = ds.selectorSlots[selectorCount >> 3];\\n\\t\\t}\\n\\t\\t// loop through diamond cut\\n\\t\\tfor (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n\\t\\t\\t(selectorCount, selectorSlot) = LibDiamond.addReplaceRemoveFacetSelectors(\\n\\t\\t\\t\\tselectorCount,\\n\\t\\t\\t\\tselectorSlot,\\n\\t\\t\\t\\t_diamondCut[facetIndex].facetAddress,\\n\\t\\t\\t\\t_diamondCut[facetIndex].action,\\n\\t\\t\\t\\t_diamondCut[facetIndex].functionSelectors\\n\\t\\t\\t);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tfacetIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (selectorCount != originalSelectorCount) {\\n\\t\\t\\tds.selectorCount = uint16(selectorCount);\\n\\t\\t}\\n\\t\\t// If last selector slot is not full\\n\\t\\t// \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n\\t\\tif (selectorCount & 7 > 0) {\\n\\t\\t\\t// \\\"selectorCount >> 3\\\" is a gas efficient division by 8 \\\"selectorCount / 8\\\"\\n\\t\\t\\tds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n\\t\\t}\\n\\t\\temit DiamondCut(_diamondCut, _init, _calldata);\\n\\t\\tLibDiamond.initializeDiamondCut(_init, _calldata);\\n\\t}\\n}\\n\",\"keccak256\":\"0xa576e83bac4f6dcd3ed8e92ad5c30f53368067c9219d057aa0a3ecd32c1eb427\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n\\tenum FacetCutAction {\\n\\t\\tAdd,\\n\\t\\tReplace,\\n\\t\\tRemove\\n\\t}\\n\\t// Add=0, Replace=1, Remove=2\\n\\n\\tstruct FacetCut {\\n\\t\\taddress facetAddress;\\n\\t\\tFacetCutAction action;\\n\\t\\tbytes4[] functionSelectors;\\n\\t}\\n\\n\\t/// @notice Add/replace/remove any number of functions and optionally execute\\n\\t///         a function with delegatecall\\n\\t/// @param _diamondCut Contains the facet addresses and function selectors\\n\\t/// @param _init The address of the contract or facet to execute _calldata\\n\\t/// @param _calldata A function call, including function selector and arguments\\n\\t///                  _calldata is executed with delegatecall on _init\\n\\tfunction diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n\\tevent DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xf92889a9e14ab87d3c46ffe838894453d3a86e5d6433b549c3ec2b2dd788a623\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n\\t/// @dev This emits when ownership of a contract changes.\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/// @notice Get the address of the owner\\n\\t/// @return owner_ The address of the owner.\\n\\tfunction owner() external view returns (address owner_);\\n\\n\\t/// @notice Set the address of the new owner of the contract\\n\\t/// @dev Set _newOwner to address(0) to renounce any ownership.\\n\\t/// @param _newOwner The address of the new owner of the contract\\n\\tfunction transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x3c7a88d2e78d66154b0fb99bcd6bf3c86ea220dc7624672004a4934683490e71\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from '../interfaces/IDiamondCut.sol';\\nimport {IERC173} from '../interfaces/IERC173.sol';\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n\\tbytes32 constant DIAMOND_STORAGE_POSITION = keccak256('diamond.standard.diamond.storage');\\n\\n\\terror OwnableUnauthorizedAccount(address _invalidAddress);\\n\\terror OwnableInvalidOwner(address _owner);\\n\\n\\tstruct DiamondStorage {\\n\\t\\t// maps function selectors to the facets that execute the functions.\\n\\t\\t// and maps the selectors to their position in the selectorSlots array.\\n\\t\\t// func selector => address facet, selector position\\n\\t\\tmapping(bytes4 => bytes32) facets;\\n\\t\\t// array of slots of function selectors.\\n\\t\\t// each slot holds 8 function selectors.\\n\\t\\tmapping(uint256 => bytes32) selectorSlots;\\n\\t\\t// The number of function selectors in selectorSlots\\n\\t\\tuint16 selectorCount;\\n\\t\\t// Used to query if a contract implements an interface.\\n\\t\\t// Used to implement ERC-165.\\n\\t\\tmapping(bytes4 => bool) supportedInterfaces;\\n\\t\\t// owner of the contract\\n\\t\\taddress contractOwner;\\n\\t}\\n\\n\\tfunction diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n\\t\\tbytes32 position = DIAMOND_STORAGE_POSITION;\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\t// move ownership stuff to Ownership facet\\n\\tfunction setContractOwner(address _newOwner) internal {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\taddress previousOwner = ds.contractOwner;\\n\\t\\tds.contractOwner = _newOwner;\\n\\t\\temit IERC173.OwnershipTransferred(previousOwner, _newOwner);\\n\\t}\\n\\n\\tfunction contractOwner() internal view returns (address contractOwner_) {\\n\\t\\tcontractOwner_ = diamondStorage().contractOwner;\\n\\t}\\n\\n\\tfunction enforceIsContractOwner() internal view {\\n\\t\\tif (msg.sender != diamondStorage().contractOwner) {\\n\\t\\t\\trevert OwnableUnauthorizedAccount(msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\tevent DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n\\tbytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n\\tbytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n\\t// Internal function version of diamondCut\\n\\t// This code is almost the same as the external diamondCut,\\n\\t// except it is using 'Facet[] memory _diamondCut' instead of\\n\\t// 'Facet[] calldata _diamondCut'.\\n\\t// The code is duplicated to prevent copying calldata to memory which\\n\\t// causes an error for a two dimensional array.\\n\\tfunction diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\tuint256 originalSelectorCount = ds.selectorCount;\\n\\t\\tuint256 selectorCount = originalSelectorCount;\\n\\t\\tbytes32 selectorSlot;\\n\\t\\t// Check if last selector slot is not full\\n\\t\\t// \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n\\t\\tif (selectorCount & 7 > 0) {\\n\\t\\t\\t// get last selectorSlot\\n\\t\\t\\t// \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n\\t\\t\\tselectorSlot = ds.selectorSlots[selectorCount >> 3];\\n\\t\\t}\\n\\t\\t// loop through diamond cut\\n\\t\\tfor (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n\\t\\t\\t(selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n\\t\\t\\t\\tselectorCount,\\n\\t\\t\\t\\tselectorSlot,\\n\\t\\t\\t\\t_diamondCut[facetIndex].facetAddress,\\n\\t\\t\\t\\t_diamondCut[facetIndex].action,\\n\\t\\t\\t\\t_diamondCut[facetIndex].functionSelectors\\n\\t\\t\\t);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tfacetIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (selectorCount != originalSelectorCount) {\\n\\t\\t\\tds.selectorCount = uint16(selectorCount);\\n\\t\\t}\\n\\t\\t// If last selector slot is not full\\n\\t\\t// \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n\\t\\tif (selectorCount & 7 > 0) {\\n\\t\\t\\t// \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n\\t\\t\\tds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n\\t\\t}\\n\\t\\temit DiamondCut(_diamondCut, _init, _calldata);\\n\\t\\tinitializeDiamondCut(_init, _calldata);\\n\\t}\\n\\n\\tfunction addReplaceRemoveFacetSelectors(\\n\\t\\tuint256 _selectorCount,\\n\\t\\tbytes32 _selectorSlot,\\n\\t\\taddress _newFacetAddress,\\n\\t\\tIDiamondCut.FacetCutAction _action,\\n\\t\\tbytes4[] memory _selectors\\n\\t) internal returns (uint256, bytes32) {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\trequire(_selectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n\\t\\tif (_action == IDiamondCut.FacetCutAction.Add) {\\n\\t\\t\\tenforceHasContractCode(_newFacetAddress, 'LibDiamondCut: Add facet has no code');\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\trequire(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n\\t\\t\\t\\t// add facet for selector\\n\\t\\t\\t\\tds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n\\t\\t\\t\\t// \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n\\t\\t\\t\\t// \\\" << 5 is the same as multiplying by 32 ( * 32)\\n\\t\\t\\t\\tuint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n\\t\\t\\t\\t// clear selector position in slot and add selector\\n\\t\\t\\t\\t_selectorSlot =\\n\\t\\t\\t\\t\\t(_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n\\t\\t\\t\\t\\t(bytes32(selector) >> selectorInSlotPosition);\\n\\t\\t\\t\\t// if slot is full then write it to storage\\n\\t\\t\\t\\tif (selectorInSlotPosition == 224) {\\n\\t\\t\\t\\t\\t// \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n\\t\\t\\t\\t\\tds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n\\t\\t\\t\\t\\t_selectorSlot = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t_selectorCount++;\\n\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\tselectorIndex++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n\\t\\t\\tenforceHasContractCode(_newFacetAddress, 'LibDiamondCut: Replace facet has no code');\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\taddress oldFacetAddress = address(bytes20(oldFacet));\\n\\t\\t\\t\\t// only useful if immutable functions exist\\n\\t\\t\\t\\trequire(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n\\t\\t\\t\\trequire(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n\\t\\t\\t\\trequire(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n\\t\\t\\t\\t// replace old facet address\\n\\t\\t\\t\\tds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\tselectorIndex++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n\\t\\t\\trequire(_newFacetAddress == address(0), 'LibDiamondCut: Remove facet address must be address(0)');\\n\\t\\t\\t// \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n\\t\\t\\tuint256 selectorSlotCount = _selectorCount >> 3;\\n\\t\\t\\t// \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n\\t\\t\\tuint256 selectorInSlotIndex = _selectorCount & 7;\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n\\t\\t\\t\\tif (selectorInSlotIndex == 0) {\\n\\t\\t\\t\\t\\t// get last selectorSlot\\n\\t\\t\\t\\t\\tselectorSlotCount--;\\n\\t\\t\\t\\t\\t_selectorSlot = ds.selectorSlots[selectorSlotCount];\\n\\t\\t\\t\\t\\tselectorInSlotIndex = 7;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tselectorInSlotIndex--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbytes4 lastSelector;\\n\\t\\t\\t\\tuint256 oldSelectorsSlotCount;\\n\\t\\t\\t\\tuint256 oldSelectorInSlotPosition;\\n\\t\\t\\t\\t// adding a block here prevents stack too deep error\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\taddress(bytes20(oldFacet)) != address(0),\\n\\t\\t\\t\\t\\t\\t\\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t// only useful if immutable functions exist\\n\\t\\t\\t\\t\\trequire(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n\\t\\t\\t\\t\\t// replace selector with last selector in ds.facets\\n\\t\\t\\t\\t\\t// gets the last selector\\n\\t\\t\\t\\t\\t// \\\" << 5 is the same as multiplying by 32 ( * 32)\\n\\t\\t\\t\\t\\tlastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n\\t\\t\\t\\t\\tif (lastSelector != selector) {\\n\\t\\t\\t\\t\\t\\t// update last selector slot position info\\n\\t\\t\\t\\t\\t\\tds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdelete ds.facets[selector];\\n\\t\\t\\t\\t\\tuint256 oldSelectorCount = uint16(uint256(oldFacet));\\n\\t\\t\\t\\t\\t// \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n\\t\\t\\t\\t\\toldSelectorsSlotCount = oldSelectorCount >> 3;\\n\\t\\t\\t\\t\\t// \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\"\\n\\t\\t\\t\\t\\t// \\\" << 5 is the same as multiplying by 32 ( * 32)\\n\\t\\t\\t\\t\\toldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (oldSelectorsSlotCount != selectorSlotCount) {\\n\\t\\t\\t\\t\\tbytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n\\t\\t\\t\\t\\t// clears the selector we are deleting and puts the last selector in its place.\\n\\t\\t\\t\\t\\toldSelectorSlot =\\n\\t\\t\\t\\t\\t\\t(oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n\\t\\t\\t\\t\\t\\t(bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\t\\t\\t\\t\\t// update storage with the modified slot\\n\\t\\t\\t\\t\\tds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// clears the selector we are deleting and puts the last selector in its place.\\n\\t\\t\\t\\t\\t_selectorSlot =\\n\\t\\t\\t\\t\\t\\t(_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n\\t\\t\\t\\t\\t\\t(bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (selectorInSlotIndex == 0) {\\n\\t\\t\\t\\t\\tdelete ds.selectorSlots[selectorSlotCount];\\n\\t\\t\\t\\t\\t_selectorSlot = 0;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\tselectorIndex++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t_selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n\\t\\t} else {\\n\\t\\t\\trevert('LibDiamondCut: Incorrect FacetCutAction');\\n\\t\\t}\\n\\t\\treturn (_selectorCount, _selectorSlot);\\n\\t}\\n\\n\\tfunction initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n\\t\\tif (_init == address(0)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tenforceHasContractCode(_init, 'LibDiamondCut: _init address has no code');\\n\\t\\t(bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\t\\tif (!success) {\\n\\t\\t\\tif (error.length > 0) {\\n\\t\\t\\t\\t// bubble up error\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(error)\\n\\t\\t\\t\\t\\trevert(add(32, error), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert InitializationFunctionReverted(_init, _calldata);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n\\t\\tuint256 contractSize;\\n\\t\\tassembly {\\n\\t\\t\\tcontractSize := extcodesize(_contract)\\n\\t\\t}\\n\\t\\trequire(contractSize > 0, _errorMessage);\\n\\t}\\n}\\n\",\"keccak256\":\"0xd3bb09562891df5dc9d7a1b36d2a90e451c01ca00a3b88112c791dce5bf8ced7\",\"license\":\"MIT\"}},\"version\":1}",
	"bytecode": "0x608060405234801561001057600080fd5b50611084806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610b6c565b610045565b005b61004d61023f565b600061005761027c565b600281015490915061ffff81169081906000906007161561008a5750600381901c60009081526001840160205260409020545b60005b888110156101775761016a83838c8c858181106100ac576100ac610c1d565b90506020028101906100be9190610c33565b6100cc906020810190610c53565b8d8d868181106100de576100de610c1d565b90506020028101906100f09190610c33565b610101906040810190602001610c84565b8e8e8781811061011357610113610c1d565b90506020028101906101259190610c33565b610133906040810190610c9f565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506102a092505050565b909350915060010161008d565b508282146101935760028401805461ffff191661ffff84161790555b60078216156101b557600382901c600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67389898989896040516101ec959493929190610d77565b60405180910390a16102348787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1b92505050565b505050505050505050565b61024761027c565b600401546001600160a01b0316331461027a5760405163118cdaa760e01b81523360048201526024015b60405180910390fd5b565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60008060006102ad61027c565b905060008451116103145760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b6064820152608401610271565b600085600281111561032857610328610ce8565b0361048e5761034f86604051806060016040528060248152602001610fdb60249139610ae7565b60005b845181101561048857600085828151811061036f5761036f610c1d565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c156104085760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b6064820152608401610271565b6001600160e01b031980831660008181526020879052604090206001600160601b031960608d901b168e17905560e060058e901b811692831c199c909c1690821c179a81900361046c5760038c901c600090815260018601602052604081209b909b555b8b61047681610eb9565b9c505060019093019250610352915050565b50610a0f565b60018560028111156104a2576104a2610ce8565b03610694576104c98660405180606001604052806028815260200161102760289139610ae7565b60005b84518110156104885760008582815181106104e9576104e9610c1d565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c30810361057e5760405162461bcd60e51b815260206004820152602f60248201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60448201526e3aba30b1363290333ab731ba34b7b760891b6064820152608401610271565b896001600160a01b0316816001600160a01b0316036105ee5760405162461bcd60e51b81526020600482015260386024820152600080516020610fbb83398151915260448201527731ba34b7b7103bb4ba341039b0b6b290333ab731ba34b7b760411b6064820152608401610271565b6001600160a01b0381166106535760405162461bcd60e51b81526020600482015260386024820152600080516020610fbb83398151915260448201527718dd1a5bdb881d1a185d08191bd95cdb89dd08195e1a5cdd60421b6064820152608401610271565b506001600160e01b031990911660009081526020849052604090206001600160601b03919091166001600160601b031960608a901b161790556001016104cc565b60028560028111156106a8576106a8610ce8565b036109b7576001600160a01b038616156107235760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b6064820152608401610271565b600388901c6007891660005b8651811015610997578160000361076a578261074a81610ed2565b60008181526001870160205260409020549b509350600792506107789050565b8161077481610ed2565b9250505b6000806000808a858151811061079057610790610c1d565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c61082a5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e636044820152761d1a5bdb881d1a185d08191bd95cdb89dd08195e1a5cdd604a1b6064820152608401610271565b30606082901c036108945760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b6064820152608401610271565b600587901b8f901b94506001600160e01b0319808616908316146108e5576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166001600160601b0383161790555b6001600160e01b031991909116600090815260208990526040812055600381901c611fff16925060051b60e016905085821461094a576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c17905561096e565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b8460000361098c57600086815260018801602052604081208190559c505b50505060010161072f565b50806109a4836008610ee9565b6109ae9190610f06565b99505050610a0f565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b6064820152608401610271565b50959694955050505050565b6001600160a01b038216610a2d575050565b610a4f82604051806060016040528060288152602001610fff60289139610ae7565b600080836001600160a01b031683604051610a6a9190610f3d565b600060405180830381855af49150503d8060008114610aa5576040519150601f19603f3d011682016040523d82523d6000602084013e610aaa565b606091505b509150915081610ae157805115610ac45780518082602001fd5b838360405163192105d760e01b8152600401610271929190610f7b565b50505050565b813b8181610ae15760405162461bcd60e51b81526004016102719190610fa7565b80356001600160a01b0381168114610b1f57600080fd5b919050565b60008083601f840112610b3657600080fd5b5081356001600160401b03811115610b4d57600080fd5b602083019150836020828501011115610b6557600080fd5b9250929050565b600080600080600060608688031215610b8457600080fd5b85356001600160401b0380821115610b9b57600080fd5b818801915088601f830112610baf57600080fd5b813581811115610bbe57600080fd5b8960208260051b8501011115610bd357600080fd5b60208301975080965050610be960208901610b08565b94506040880135915080821115610bff57600080fd5b50610c0c88828901610b24565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112610c4957600080fd5b9190910192915050565b600060208284031215610c6557600080fd5b610c6e82610b08565b9392505050565b803560038110610b1f57600080fd5b600060208284031215610c9657600080fd5b610c6e82610c75565b6000808335601e19843603018112610cb657600080fd5b8301803591506001600160401b03821115610cd057600080fd5b6020019150600581901b3603821315610b6557600080fd5b634e487b7160e01b600052602160045260246000fd5b818352600060208085019450826000805b86811015610d425782356001600160e01b03198116808214610d2f578384fd5b8952509683019691830191600101610d0f565b50959695505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060808252818101869052600090600560808085019089831b8601018a855b8b811015610e7057878303607f190184528135368e9003605e19018112610dbc57600080fd5b8d016001600160a01b03610dcf82610b08565b1684526020610ddf818301610c75565b60038110610dfd57634e487b7160e01b600052602160045260246000fd5b8582015260408281013536849003601e19018112610e1a57600080fd5b9092018181019290356001600160401b03811115610e3757600080fd5b80891b3603841315610e4857600080fd5b8982880152610e5a8a88018286610cfe565b9783019796505050929092019150600101610d96565b50506001600160a01b03891660208701528581036040870152610e9481888a610d4e565b9b9a5050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610ecb57610ecb610ea3565b5060010190565b600081610ee157610ee1610ea3565b506000190190565b8082028115828204841417610f0057610f00610ea3565b92915050565b80820180821115610f0057610f00610ea3565b60005b83811015610f34578181015183820152602001610f1c565b50506000910152565b60008251610c49818460208701610f19565b60008151808452610f67816020860160208601610f19565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610f9f90830184610f4f565b949350505050565b602081526000610c6e6020830184610f4f56fe4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a264697066735822122007886db5e42bff8d7c291ba4288207ef62a86e90bedf9f0514fd300f121af92764736f6c63430008160033",
	"deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80631f931c1c14610030575b600080fd5b61004361003e366004610b6c565b610045565b005b61004d61023f565b600061005761027c565b600281015490915061ffff81169081906000906007161561008a5750600381901c60009081526001840160205260409020545b60005b888110156101775761016a83838c8c858181106100ac576100ac610c1d565b90506020028101906100be9190610c33565b6100cc906020810190610c53565b8d8d868181106100de576100de610c1d565b90506020028101906100f09190610c33565b610101906040810190602001610c84565b8e8e8781811061011357610113610c1d565b90506020028101906101259190610c33565b610133906040810190610c9f565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506102a092505050565b909350915060010161008d565b508282146101935760028401805461ffff191661ffff84161790555b60078216156101b557600382901c600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67389898989896040516101ec959493929190610d77565b60405180910390a16102348787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a1b92505050565b505050505050505050565b61024761027c565b600401546001600160a01b0316331461027a5760405163118cdaa760e01b81523360048201526024015b60405180910390fd5b565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b60008060006102ad61027c565b905060008451116103145760405162461bcd60e51b815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201526a1858d95d081d1bc818dd5d60aa1b6064820152608401610271565b600085600281111561032857610328610ce8565b0361048e5761034f86604051806060016040528060248152602001610fdb60249139610ae7565b60005b845181101561048857600085828151811061036f5761036f610c1d565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c156104085760405162461bcd60e51b815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f6044820152746e207468617420616c72656164792065786973747360581b6064820152608401610271565b6001600160e01b031980831660008181526020879052604090206001600160601b031960608d901b168e17905560e060058e901b811692831c199c909c1690821c179a81900361046c5760038c901c600090815260018601602052604081209b909b555b8b61047681610eb9565b9c505060019093019250610352915050565b50610a0f565b60018560028111156104a2576104a2610ce8565b03610694576104c98660405180606001604052806028815260200161102760289139610ae7565b60005b84518110156104885760008582815181106104e9576104e9610c1d565b6020908102919091018101516001600160e01b03198116600090815291859052604090912054909150606081901c30810361057e5760405162461bcd60e51b815260206004820152602f60248201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60448201526e3aba30b1363290333ab731ba34b7b760891b6064820152608401610271565b896001600160a01b0316816001600160a01b0316036105ee5760405162461bcd60e51b81526020600482015260386024820152600080516020610fbb83398151915260448201527731ba34b7b7103bb4ba341039b0b6b290333ab731ba34b7b760411b6064820152608401610271565b6001600160a01b0381166106535760405162461bcd60e51b81526020600482015260386024820152600080516020610fbb83398151915260448201527718dd1a5bdb881d1a185d08191bd95cdb89dd08195e1a5cdd60421b6064820152608401610271565b506001600160e01b031990911660009081526020849052604090206001600160601b03919091166001600160601b031960608a901b161790556001016104cc565b60028560028111156106a8576106a8610ce8565b036109b7576001600160a01b038616156107235760405162461bcd60e51b815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f76652066616365742061646472604482015275657373206d757374206265206164647265737328302960501b6064820152608401610271565b600388901c6007891660005b8651811015610997578160000361076a578261074a81610ed2565b60008181526001870160205260409020549b509350600792506107789050565b8161077481610ed2565b9250505b6000806000808a858151811061079057610790610c1d565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c61082a5760405162461bcd60e51b815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e636044820152761d1a5bdb881d1a185d08191bd95cdb89dd08195e1a5cdd604a1b6064820152608401610271565b30606082901c036108945760405162461bcd60e51b815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b6064820152608401610271565b600587901b8f901b94506001600160e01b0319808616908316146108e5576001600160e01b03198516600090815260208a90526040902080546001600160601b0319166001600160601b0383161790555b6001600160e01b031991909116600090815260208990526040812055600381901c611fff16925060051b60e016905085821461094a576000828152600188016020526040902080546001600160e01b031980841c19909116908516831c17905561096e565b80836001600160e01b031916901c816001600160e01b031960001b901c198e16179c505b8460000361098c57600086815260018801602052604081208190559c505b50505060010161072f565b50806109a4836008610ee9565b6109ae9190610f06565b99505050610a0f565b60405162461bcd60e51b815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f727265637420466163657443756044820152663a20b1ba34b7b760c91b6064820152608401610271565b50959694955050505050565b6001600160a01b038216610a2d575050565b610a4f82604051806060016040528060288152602001610fff60289139610ae7565b600080836001600160a01b031683604051610a6a9190610f3d565b600060405180830381855af49150503d8060008114610aa5576040519150601f19603f3d011682016040523d82523d6000602084013e610aaa565b606091505b509150915081610ae157805115610ac45780518082602001fd5b838360405163192105d760e01b8152600401610271929190610f7b565b50505050565b813b8181610ae15760405162461bcd60e51b81526004016102719190610fa7565b80356001600160a01b0381168114610b1f57600080fd5b919050565b60008083601f840112610b3657600080fd5b5081356001600160401b03811115610b4d57600080fd5b602083019150836020828501011115610b6557600080fd5b9250929050565b600080600080600060608688031215610b8457600080fd5b85356001600160401b0380821115610b9b57600080fd5b818801915088601f830112610baf57600080fd5b813581811115610bbe57600080fd5b8960208260051b8501011115610bd357600080fd5b60208301975080965050610be960208901610b08565b94506040880135915080821115610bff57600080fd5b50610c0c88828901610b24565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b60008235605e19833603018112610c4957600080fd5b9190910192915050565b600060208284031215610c6557600080fd5b610c6e82610b08565b9392505050565b803560038110610b1f57600080fd5b600060208284031215610c9657600080fd5b610c6e82610c75565b6000808335601e19843603018112610cb657600080fd5b8301803591506001600160401b03821115610cd057600080fd5b6020019150600581901b3603821315610b6557600080fd5b634e487b7160e01b600052602160045260246000fd5b818352600060208085019450826000805b86811015610d425782356001600160e01b03198116808214610d2f578384fd5b8952509683019691830191600101610d0f565b50959695505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060808252818101869052600090600560808085019089831b8601018a855b8b811015610e7057878303607f190184528135368e9003605e19018112610dbc57600080fd5b8d016001600160a01b03610dcf82610b08565b1684526020610ddf818301610c75565b60038110610dfd57634e487b7160e01b600052602160045260246000fd5b8582015260408281013536849003601e19018112610e1a57600080fd5b9092018181019290356001600160401b03811115610e3757600080fd5b80891b3603841315610e4857600080fd5b8982880152610e5a8a88018286610cfe565b9783019796505050929092019150600101610d96565b50506001600160a01b03891660208701528581036040870152610e9481888a610d4e565b9b9a5050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610ecb57610ecb610ea3565b5060010190565b600081610ee157610ee1610ea3565b506000190190565b8082028115828204841417610f0057610f00610ea3565b92915050565b80820180821115610f0057610f00610ea3565b60005b83811015610f34578181015183820152602001610f1c565b50506000910152565b60008251610c49818460208701610f19565b60008151808452610f67816020860160208601610f19565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610f9f90830184610f4f565b949350505050565b602081526000610c6e6020830184610f4f56fe4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a264697066735822122007886db5e42bff8d7c291ba4288207ef62a86e90bedf9f0514fd300f121af92764736f6c63430008160033",
	"devdoc": {
		"kind": "dev",
		"methods": {
			"diamondCut((address,uint8,bytes4[])[],address,bytes)": {
				"params": {
					"_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
					"_diamondCut": "Contains the facet addresses and function selectors",
					"_init": "The address of the contract or facet to execute _calldata"
				}
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {
			"diamondCut((address,uint8,bytes4[])[],address,bytes)": {
				"notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
			}
		},
		"version": 1
	},
	"storageLayout": {
		"storage": [],
		"types": null
	}
}
