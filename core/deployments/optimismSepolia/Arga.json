{
  "address": "0xa99FfE9000dF352d10D32F2E146F6bf612b4E5D2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_diamondCutFacet",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initializationContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "InitializationFunctionReverted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7b89cd932448e6cee6500fae230dd821404f02d94036d11f3bfc396a474321f6",
  "receipt": {
    "to": null,
    "from": "0x2D9E9CCf7EaDcb8d42C85F7678d0311A0479DD50",
    "contractAddress": "0xa99FfE9000dF352d10D32F2E146F6bf612b4E5D2",
    "transactionIndex": 2,
    "gasUsed": "265770",
    "logsBloom": "0x
    "blockHash": "0xe6251028aebb7f0303e301898ea17198ea4ad491cc38cc88464af1d1a956462f",
    "transactionHash": "0x7b89cd932448e6cee6500fae230dd821404f02d94036d11f3bfc396a474321f6",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 15830730,
        "transactionHash": "0x7b89cd932448e6cee6500fae230dd821404f02d94036d11f3bfc396a474321f6",
        "address": "0xa99FfE9000dF352d10D32F2E146F6bf612b4E5D2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d9e9ccf7eadcb8d42c85f7678d0311a0479dd50"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xe6251028aebb7f0303e301898ea17198ea4ad491cc38cc88464af1d1a956462f"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 15830730,
        "transactionHash": "0x7b89cd932448e6cee6500fae230dd821404f02d94036d11f3bfc396a474321f6",
        "address": "0xa99FfE9000dF352d10D32F2E146F6bf612b4E5D2",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000325c0e405793bf97583f00e42fb7230fd74845b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000011f931c1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 12,
        "blockHash": "0xe6251028aebb7f0303e301898ea17198ea4ad491cc38cc88464af1d1a956462f"
      }
    ],
    "blockNumber": 15830730,
    "cumulativeGasUsed": "788031",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2D9E9CCf7EaDcb8d42C85F7678d0311A0479DD50",
    "0x0325c0e405793BF97583F00e42fb7230fD74845B"
  ],
  "numDeployments": 1,
  "solcInputHash": "03ead49419304f1061aea1d2404a3e18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_diamondCutFacet\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"details\":\"This emits when ownership of a contract changes.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Arga.sol\":\"Arga\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/Arga.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n*\\r\\n* Implementation of a diamond.\\r\\n/******************************************************************************/\\r\\n\\r\\nimport {LibDiamond} from './libraries/LibDiamond.sol';\\r\\nimport {IDiamondCut} from './interfaces/IDiamondCut.sol';\\r\\n\\r\\ncontract Arga {\\r\\n\\tconstructor(address _contractOwner, address _diamondCutFacet) payable {\\r\\n\\t\\tLibDiamond.setContractOwner(_contractOwner);\\r\\n\\r\\n\\t\\t// Add the diamondCut external function from the diamondCutFacet\\r\\n\\t\\tIDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\r\\n\\t\\tbytes4[] memory functionSelectors = new bytes4[](1);\\r\\n\\t\\tfunctionSelectors[0] = IDiamondCut.diamondCut.selector;\\r\\n\\t\\tcut[0] = IDiamondCut.FacetCut({\\r\\n\\t\\t\\tfacetAddress: _diamondCutFacet,\\r\\n\\t\\t\\taction: IDiamondCut.FacetCutAction.Add,\\r\\n\\t\\t\\tfunctionSelectors: functionSelectors\\r\\n\\t\\t});\\r\\n\\t\\tLibDiamond.diamondCut(cut, address(0), '');\\r\\n\\t}\\r\\n\\r\\n\\t// Find facet for function that is called and execute the\\r\\n\\t// function if a facet is found and return any value.\\r\\n\\tfallback() external payable {\\r\\n\\t\\tLibDiamond.DiamondStorage storage ds;\\r\\n\\t\\tbytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\r\\n\\t\\t// get diamond storage\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tds.slot := position\\r\\n\\t\\t}\\r\\n\\t\\t// get facet from function selector\\r\\n\\t\\taddress facet = address(bytes20(ds.facets[msg.sig]));\\r\\n\\t\\trequire(facet != address(0), 'Diamond: Function does not exist');\\r\\n\\t\\t// Execute external function from facet using delegatecall and return any value.\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// copy function selector and any arguments\\r\\n\\t\\t\\tcalldatacopy(0, 0, calldatasize())\\r\\n\\t\\t\\t// execute function call using the facet\\r\\n\\t\\t\\tlet result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\r\\n\\t\\t\\t// get any return value\\r\\n\\t\\t\\treturndatacopy(0, 0, returndatasize())\\r\\n\\t\\t\\t// return any return value or error back to the caller\\r\\n\\t\\t\\tswitch result\\r\\n\\t\\t\\tcase 0 {\\r\\n\\t\\t\\t\\trevert(0, returndatasize())\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tdefault {\\r\\n\\t\\t\\t\\treturn(0, returndatasize())\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xdf7d6944b905bb67344612820053db13e8af9393c25401361967818f1d42dd8b\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n\\tenum FacetCutAction {\\n\\t\\tAdd,\\n\\t\\tReplace,\\n\\t\\tRemove\\n\\t}\\n\\t// Add=0, Replace=1, Remove=2\\n\\n\\tstruct FacetCut {\\n\\t\\taddress facetAddress;\\n\\t\\tFacetCutAction action;\\n\\t\\tbytes4[] functionSelectors;\\n\\t}\\n\\n\\t/// @notice Add/replace/remove any number of functions and optionally execute\\n\\t///         a function with delegatecall\\n\\t/// @param _diamondCut Contains the facet addresses and function selectors\\n\\t/// @param _init The address of the contract or facet to execute _calldata\\n\\t/// @param _calldata A function call, including function selector and arguments\\n\\t///                  _calldata is executed with delegatecall on _init\\n\\tfunction diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n\\tevent DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xf92889a9e14ab87d3c46ffe838894453d3a86e5d6433b549c3ec2b2dd788a623\",\"license\":\"MIT\"},\"contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n\\t/// @dev This emits when ownership of a contract changes.\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/// @notice Get the address of the owner\\n\\t/// @return owner_ The address of the owner.\\n\\tfunction owner() external view returns (address owner_);\\n\\n\\t/// @notice Set the address of the new owner of the contract\\n\\t/// @dev Set _newOwner to address(0) to renounce any ownership.\\n\\t/// @param _newOwner The address of the new owner of the contract\\n\\tfunction transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x3c7a88d2e78d66154b0fb99bcd6bf3c86ea220dc7624672004a4934683490e71\",\"license\":\"MIT\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from '../interfaces/IDiamondCut.sol';\\nimport {IERC173} from '../interfaces/IERC173.sol';\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n\\tbytes32 constant DIAMOND_STORAGE_POSITION = keccak256('diamond.standard.diamond.storage');\\n\\n\\terror OwnableUnauthorizedAccount(address _invalidAddress);\\n\\terror OwnableInvalidOwner(address _owner);\\n\\n\\tstruct DiamondStorage {\\n\\t\\t// maps function selectors to the facets that execute the functions.\\n\\t\\t// and maps the selectors to their position in the selectorSlots array.\\n\\t\\t// func selector => address facet, selector position\\n\\t\\tmapping(bytes4 => bytes32) facets;\\n\\t\\t// array of slots of function selectors.\\n\\t\\t// each slot holds 8 function selectors.\\n\\t\\tmapping(uint256 => bytes32) selectorSlots;\\n\\t\\t// The number of function selectors in selectorSlots\\n\\t\\tuint16 selectorCount;\\n\\t\\t// Used to query if a contract implements an interface.\\n\\t\\t// Used to implement ERC-165.\\n\\t\\tmapping(bytes4 => bool) supportedInterfaces;\\n\\t\\t// owner of the contract\\n\\t\\taddress contractOwner;\\n\\t}\\n\\n\\tfunction diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n\\t\\tbytes32 position = DIAMOND_STORAGE_POSITION;\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := position\\n\\t\\t}\\n\\t}\\n\\n\\t// move ownership stuff to Ownership facet\\n\\tfunction setContractOwner(address _newOwner) internal {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\taddress previousOwner = ds.contractOwner;\\n\\t\\tds.contractOwner = _newOwner;\\n\\t\\temit IERC173.OwnershipTransferred(previousOwner, _newOwner);\\n\\t}\\n\\n\\tfunction contractOwner() internal view returns (address contractOwner_) {\\n\\t\\tcontractOwner_ = diamondStorage().contractOwner;\\n\\t}\\n\\n\\tfunction enforceIsContractOwner() internal view {\\n\\t\\tif (msg.sender != diamondStorage().contractOwner) {\\n\\t\\t\\trevert OwnableUnauthorizedAccount(msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\tevent DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n\\tbytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n\\tbytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n\\t// Internal function version of diamondCut\\n\\t// This code is almost the same as the external diamondCut,\\n\\t// except it is using 'Facet[] memory _diamondCut' instead of\\n\\t// 'Facet[] calldata _diamondCut'.\\n\\t// The code is duplicated to prevent copying calldata to memory which\\n\\t// causes an error for a two dimensional array.\\n\\tfunction diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\tuint256 originalSelectorCount = ds.selectorCount;\\n\\t\\tuint256 selectorCount = originalSelectorCount;\\n\\t\\tbytes32 selectorSlot;\\n\\t\\t// Check if last selector slot is not full\\n\\t\\t// \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n\\t\\tif (selectorCount & 7 > 0) {\\n\\t\\t\\t// get last selectorSlot\\n\\t\\t\\t// \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n\\t\\t\\tselectorSlot = ds.selectorSlots[selectorCount >> 3];\\n\\t\\t}\\n\\t\\t// loop through diamond cut\\n\\t\\tfor (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n\\t\\t\\t(selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n\\t\\t\\t\\tselectorCount,\\n\\t\\t\\t\\tselectorSlot,\\n\\t\\t\\t\\t_diamondCut[facetIndex].facetAddress,\\n\\t\\t\\t\\t_diamondCut[facetIndex].action,\\n\\t\\t\\t\\t_diamondCut[facetIndex].functionSelectors\\n\\t\\t\\t);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tfacetIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (selectorCount != originalSelectorCount) {\\n\\t\\t\\tds.selectorCount = uint16(selectorCount);\\n\\t\\t}\\n\\t\\t// If last selector slot is not full\\n\\t\\t// \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n\\t\\tif (selectorCount & 7 > 0) {\\n\\t\\t\\t// \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n\\t\\t\\tds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n\\t\\t}\\n\\t\\temit DiamondCut(_diamondCut, _init, _calldata);\\n\\t\\tinitializeDiamondCut(_init, _calldata);\\n\\t}\\n\\n\\tfunction addReplaceRemoveFacetSelectors(\\n\\t\\tuint256 _selectorCount,\\n\\t\\tbytes32 _selectorSlot,\\n\\t\\taddress _newFacetAddress,\\n\\t\\tIDiamondCut.FacetCutAction _action,\\n\\t\\tbytes4[] memory _selectors\\n\\t) internal returns (uint256, bytes32) {\\n\\t\\tDiamondStorage storage ds = diamondStorage();\\n\\t\\trequire(_selectors.length > 0, 'LibDiamondCut: No selectors in facet to cut');\\n\\t\\tif (_action == IDiamondCut.FacetCutAction.Add) {\\n\\t\\t\\tenforceHasContractCode(_newFacetAddress, 'LibDiamondCut: Add facet has no code');\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\trequire(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n\\t\\t\\t\\t// add facet for selector\\n\\t\\t\\t\\tds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n\\t\\t\\t\\t// \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n\\t\\t\\t\\t// \\\" << 5 is the same as multiplying by 32 ( * 32)\\n\\t\\t\\t\\tuint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n\\t\\t\\t\\t// clear selector position in slot and add selector\\n\\t\\t\\t\\t_selectorSlot =\\n\\t\\t\\t\\t\\t(_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n\\t\\t\\t\\t\\t(bytes32(selector) >> selectorInSlotPosition);\\n\\t\\t\\t\\t// if slot is full then write it to storage\\n\\t\\t\\t\\tif (selectorInSlotPosition == 224) {\\n\\t\\t\\t\\t\\t// \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n\\t\\t\\t\\t\\tds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n\\t\\t\\t\\t\\t_selectorSlot = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t_selectorCount++;\\n\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\tselectorIndex++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n\\t\\t\\tenforceHasContractCode(_newFacetAddress, 'LibDiamondCut: Replace facet has no code');\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\taddress oldFacetAddress = address(bytes20(oldFacet));\\n\\t\\t\\t\\t// only useful if immutable functions exist\\n\\t\\t\\t\\trequire(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n\\t\\t\\t\\trequire(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n\\t\\t\\t\\trequire(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n\\t\\t\\t\\t// replace old facet address\\n\\t\\t\\t\\tds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\tselectorIndex++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n\\t\\t\\trequire(_newFacetAddress == address(0), 'LibDiamondCut: Remove facet address must be address(0)');\\n\\t\\t\\t// \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n\\t\\t\\tuint256 selectorSlotCount = _selectorCount >> 3;\\n\\t\\t\\t// \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n\\t\\t\\tuint256 selectorInSlotIndex = _selectorCount & 7;\\n\\t\\t\\tfor (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n\\t\\t\\t\\tif (selectorInSlotIndex == 0) {\\n\\t\\t\\t\\t\\t// get last selectorSlot\\n\\t\\t\\t\\t\\tselectorSlotCount--;\\n\\t\\t\\t\\t\\t_selectorSlot = ds.selectorSlots[selectorSlotCount];\\n\\t\\t\\t\\t\\tselectorInSlotIndex = 7;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tselectorInSlotIndex--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbytes4 lastSelector;\\n\\t\\t\\t\\tuint256 oldSelectorsSlotCount;\\n\\t\\t\\t\\tuint256 oldSelectorInSlotPosition;\\n\\t\\t\\t\\t// adding a block here prevents stack too deep error\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbytes4 selector = _selectors[selectorIndex];\\n\\t\\t\\t\\t\\tbytes32 oldFacet = ds.facets[selector];\\n\\t\\t\\t\\t\\trequire(\\n\\t\\t\\t\\t\\t\\taddress(bytes20(oldFacet)) != address(0),\\n\\t\\t\\t\\t\\t\\t\\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t// only useful if immutable functions exist\\n\\t\\t\\t\\t\\trequire(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n\\t\\t\\t\\t\\t// replace selector with last selector in ds.facets\\n\\t\\t\\t\\t\\t// gets the last selector\\n\\t\\t\\t\\t\\t// \\\" << 5 is the same as multiplying by 32 ( * 32)\\n\\t\\t\\t\\t\\tlastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));\\n\\t\\t\\t\\t\\tif (lastSelector != selector) {\\n\\t\\t\\t\\t\\t\\t// update last selector slot position info\\n\\t\\t\\t\\t\\t\\tds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdelete ds.facets[selector];\\n\\t\\t\\t\\t\\tuint256 oldSelectorCount = uint16(uint256(oldFacet));\\n\\t\\t\\t\\t\\t// \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n\\t\\t\\t\\t\\toldSelectorsSlotCount = oldSelectorCount >> 3;\\n\\t\\t\\t\\t\\t// \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\"\\n\\t\\t\\t\\t\\t// \\\" << 5 is the same as multiplying by 32 ( * 32)\\n\\t\\t\\t\\t\\toldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (oldSelectorsSlotCount != selectorSlotCount) {\\n\\t\\t\\t\\t\\tbytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n\\t\\t\\t\\t\\t// clears the selector we are deleting and puts the last selector in its place.\\n\\t\\t\\t\\t\\toldSelectorSlot =\\n\\t\\t\\t\\t\\t\\t(oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n\\t\\t\\t\\t\\t\\t(bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\t\\t\\t\\t\\t// update storage with the modified slot\\n\\t\\t\\t\\t\\tds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// clears the selector we are deleting and puts the last selector in its place.\\n\\t\\t\\t\\t\\t_selectorSlot =\\n\\t\\t\\t\\t\\t\\t(_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n\\t\\t\\t\\t\\t\\t(bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (selectorInSlotIndex == 0) {\\n\\t\\t\\t\\t\\tdelete ds.selectorSlots[selectorSlotCount];\\n\\t\\t\\t\\t\\t_selectorSlot = 0;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\tselectorIndex++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t_selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n\\t\\t} else {\\n\\t\\t\\trevert('LibDiamondCut: Incorrect FacetCutAction');\\n\\t\\t}\\n\\t\\treturn (_selectorCount, _selectorSlot);\\n\\t}\\n\\n\\tfunction initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n\\t\\tif (_init == address(0)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tenforceHasContractCode(_init, 'LibDiamondCut: _init address has no code');\\n\\t\\t(bool success, bytes memory error) = _init.delegatecall(_calldata);\\n\\t\\tif (!success) {\\n\\t\\t\\tif (error.length > 0) {\\n\\t\\t\\t\\t// bubble up error\\n\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(error)\\n\\t\\t\\t\\t\\trevert(add(32, error), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert InitializationFunctionReverted(_init, _calldata);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n\\t\\tuint256 contractSize;\\n\\t\\tassembly {\\n\\t\\t\\tcontractSize := extcodesize(_contract)\\n\\t\\t}\\n\\t\\trequire(contractSize > 0, _errorMessage);\\n\\t}\\n}\\n\",\"keccak256\":\"0xd3bb09562891df5dc9d7a1b36d2a90e451c01ca00a3b88112c791dce5bf8ced7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405236600a57005b600080356001600160e01b03191681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020819052604090912054819060601c80609b5760405162461bcd60e51b815260206004820181905260248201527f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374604482015260640160405180910390fd5b3660008037600080366000845af43d6000803e80801560b9573d6000f35b3d6000fdfea26469706673582212202974d12d4b7692d9ed88845ec07b5746fbbebdf1b54835bd5af082f854ff272264736f6c63430008160033",
  "devdoc": {
    "events": {
      "OwnershipTransferred(address,address)": {
        "details": "This emits when ownership of a contract changes."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}